// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: internal/microservices/auth/AuthPB/authPB.proto

package authpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthMicroservice_Register_FullMethodName    = "/authpb.AuthMicroservice/Register"
	AuthMicroservice_Login_FullMethodName       = "/authpb.AuthMicroservice/Login"
	AuthMicroservice_GetUserById_FullMethodName = "/authpb.AuthMicroservice/GetUserById"
)

// AuthMicroserviceClient is the client API for AuthMicroservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthMicroserviceClient interface {
	Register(ctx context.Context, in *UserS, opts ...grpc.CallOption) (*ResponseUser, error)
	Login(ctx context.Context, in *UserS, opts ...grpc.CallOption) (*ResponseUser, error)
	GetUserById(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*ResponseUser, error)
}

type authMicroserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthMicroserviceClient(cc grpc.ClientConnInterface) AuthMicroserviceClient {
	return &authMicroserviceClient{cc}
}

func (c *authMicroserviceClient) Register(ctx context.Context, in *UserS, opts ...grpc.CallOption) (*ResponseUser, error) {
	out := new(ResponseUser)
	err := c.cc.Invoke(ctx, AuthMicroservice_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authMicroserviceClient) Login(ctx context.Context, in *UserS, opts ...grpc.CallOption) (*ResponseUser, error) {
	out := new(ResponseUser)
	err := c.cc.Invoke(ctx, AuthMicroservice_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authMicroserviceClient) GetUserById(ctx context.Context, in *UserId, opts ...grpc.CallOption) (*ResponseUser, error) {
	out := new(ResponseUser)
	err := c.cc.Invoke(ctx, AuthMicroservice_GetUserById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthMicroserviceServer is the server API for AuthMicroservice service.
// All implementations must embed UnimplementedAuthMicroserviceServer
// for forward compatibility
type AuthMicroserviceServer interface {
	Register(context.Context, *UserS) (*ResponseUser, error)
	Login(context.Context, *UserS) (*ResponseUser, error)
	GetUserById(context.Context, *UserId) (*ResponseUser, error)
	//mustEmbedUnimplementedAuthMicroserviceServer()
}

// UnimplementedAuthMicroserviceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthMicroserviceServer struct {
}

func (UnimplementedAuthMicroserviceServer) Register(context.Context, *UserS) (*ResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthMicroserviceServer) Login(context.Context, *UserS) (*ResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthMicroserviceServer) GetUserById(context.Context, *UserId) (*ResponseUser, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedAuthMicroserviceServer) mustEmbedUnimplementedAuthMicroserviceServer() {}

// UnsafeAuthMicroserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthMicroserviceServer will
// result in compilation errors.
type UnsafeAuthMicroserviceServer interface {
	mustEmbedUnimplementedAuthMicroserviceServer()
}

func RegisterAuthMicroserviceServer(s grpc.ServiceRegistrar, srv AuthMicroserviceServer) {
	s.RegisterService(&AuthMicroservice_ServiceDesc, srv)
}

func _AuthMicroservice_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthMicroserviceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthMicroservice_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthMicroserviceServer).Register(ctx, req.(*UserS))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthMicroservice_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthMicroserviceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthMicroservice_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthMicroserviceServer).Login(ctx, req.(*UserS))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthMicroservice_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthMicroserviceServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthMicroservice_GetUserById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthMicroserviceServer).GetUserById(ctx, req.(*UserId))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthMicroservice_ServiceDesc is the grpc.ServiceDesc for AuthMicroservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthMicroservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "authpb.AuthMicroservice",
	HandlerType: (*AuthMicroserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AuthMicroservice_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthMicroservice_Login_Handler,
		},
		{
			MethodName: "GetUserById",
			Handler:    _AuthMicroservice_GetUserById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/microservices/auth/AuthPB/authPB.proto",
}
